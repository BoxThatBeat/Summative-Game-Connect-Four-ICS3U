class ConnectFour {

  public static char[][] board = new char[6][7]; // Char array for the game board (6x7 board)
  
  public static void main (String [] args) {
    //int user1, user2; // Int vars for the user inputs
    char player1 = 82, player2 = 89; // Char variables for the players' chips
    int playerTurn = 0; // Int var that makes each player take turns, set at zero for first players turn
    System.out.println("Welcome to Connect Four!");  
    
    // Setting all values of the board array to space char
    for (int y=0; y<6; y++) {
      for (int x=0; x<7; x++) {
        board[y][x] = 32;
      }
    }
    
    do { // Do loop to test program
      
      printBoard(board); // Calling print board method to print the board
      
      if (playerTurn%2 == 0) { // If playerTurn mod 2 is zero, player 1 has their turn
        boardInteraction(player1, 1); // Call for boardInteraction method to set player 1's piece on the board 
      }
      else { // If the remainder is not 0, player 2 has their turn 
        boardInteraction(player2, 2); // Call for boardInteraction method to set player 2's piece on the board
      }

      playerTurn++; // Adding one to playerTurn int to make sure the next loop changes turns 
    } while (false!=true); // Statement to continuously loop
    
  }
  
  // Void method to print the game board
  public static void printBoard (char[][] board) {
    System.out.println(" 1  2  3  4  5  6  7"); // Prints numbers over the columns
    for (int y=0; y<6; y++) { // Cycles through the rows
      for (int x=0; x<7; x++) { // Cycles through the columns
        System.out.print("[");
        System.out.print(board[y][x]); // Prints the value of board array at index y,x
        System.out.print("]");
      }
      System.out.print("\n");
    }
  }
  
  // Return method for the users input, parameter int player to print which players turn it is
  public static int userInput (int player) { 
    int userIn = 0; // Int for the user input (preset to 0 to be able to compile)
    boolean validInput = true; // Boolean for wether or not it's a valid input
    // Prompt for user input
    do {
      try {
        System.out.print("Player " + player + " turn : ");
        userIn = In.getInt();
        if (!(userIn >= 1 && userIn <=7)) { // If the user input is not between 1 and 7, sets validInput to false
          validInput = false;
          System.out.println("Not a valid input.");
        }
        else {
          validInput = true;
        }
      }
      catch (Exception e) { // catches any exception
        System.out.println("Not a valid input.");
        validInput = false;
      }
    } while (validInput == false); // Loop exits when the user input is a valid one
    return userIn -=1; // Takes their value and substracts 1 (to avoid array out of bounds error), returns it
  }
  
  // Void method to set the player's pieces on the game board, parameters playerChip char for the players unique chip and player int for which player
  public static void boardInteraction (char playerChip, int player) {
    boolean chipPlaced; // Boolean variable for wether or not a chip has already placed
    int userIn = userInput(player); // Getting the users input
    for (int i=0; i<7; i++) { // Looping through the columns
      chipPlaced = false; // Sets chipPlaced to false meaning that a chip must be placed
      if (userIn == i) { // When it reaches the column that the player desires
        for (int x=5; x>=0; x--) { // Loops through the rows, (From bottom of the board to the top)
          if (board[x][i] == 32 && chipPlaced == false) {
            board[x][i] = playerChip; // Changes the value of the element at index x, i to the char 'R'
            chipPlaced = true; // Sets chipPlaced to true, meaning a chip was placed and a second chip should not be plavced this turn
          }
        }
      }
    }
  }

}
