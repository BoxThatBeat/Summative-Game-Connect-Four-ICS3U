class ConnectFour {
  
  public static char[][] board = new char[6][7]; // Char array for the game board (6x7 board)
  
  public static void main (String [] args) {
    //int user1, user2; // Int vars for the user inputs
    char player1 = 82, player2 = 89; // Char variables for the players' chips
    int playerTurn; // Int var that makes each player take turns, set at zero for first players turn
    boolean gameOver, replayGame; // Boolean variable to determine whether or not the game is over, and for whether or not to end the program
    
    System.out.println("Welcome to Connect Four!"); // Initial statement  
    
    rules(); // Calling the rules method to print out the rules of the game
    
    do { // Loop through each game
      
      setupBoard(); // Calling setupBoard method to set up the board for a new game
    
      printBoard(board); // Calling print board method to print the board, before the loop
      
      playerTurn = 0; // Setting the playerTurn var to 0 to make player 1 start
      
      do { // Do loop to cycle through each players' turn
        
        if (playerTurn%2 == 0) { // If playerTurn mod 2 is zero, player 1 has their turn
          boardInteraction(player1, 1); // Call for boardInteraction method to set player 1's piece on the board 
        }
        else { // If the remainder is not 0, player 2 has their turn 
          boardInteraction(player2, 2); // Call for boardInteraction method to set player 2's piece on the board
        }
        
        printBoard(board); // Calling print board method to print the board
        
        if (playerTurn%2 == 0) {
          if (winChecker(player1) == true) { // If the win checker returns true, says player 1 wins, sets gameOver to true to end the loop
            System.out.println("Player 1 wins!");
            gameOver = true;
          }
          else { // If not, sets gameOver to false, continuing the game
            gameOver = false;
          }
        }
        else {
          if (winChecker(player2) == true) { // If the win checker returns true, says player 2 wins, sets gameOver to true to end the loop
            System.out.println("Player 2 wins!");
            gameOver = true;
          }
          else { // If not, sets gameOver to false, continuing the game
            gameOver = false;
          }
        }
        
        playerTurn++; // Adding one to playerTurn int to make sure the next loop changes turns 
      } while (gameOver == false); // Game ends when gameOver boolean becomes true
      
      replayGame = replayGame();
      
    } while (replayGame == true); // Program ends when replayGame is equal to false
    
    System.out.println("Thanks for playing!!!\n\nMade by Nabeel Warsalee\nICS3U Final Project\nJune 5th, 2017");
  }
  
  // Void method to print the game board
  public static void printBoard (char[][] board) {
    System.out.println("        Board       "); // Line that says it's the board
    System.out.println(" 1  2  3  4  5  6  7"); // Prints numbers over the columns
    for (int y=0; y<6; y++) { // Cycles through the rows
      for (int x=0; x<7; x++) { // Cycles through the columns
        System.out.print("[");
        System.out.print(board[y][x]); // Prints the value of board array at index y,x
        System.out.print("]");
      }
      System.out.print("\n");
    }
  }
  
  // Void method to print the list of rules for the game
  public static void rules () {
    System.out.println("\nThese are the rules...");
    System.out.println("- Be the first player to get four of your chips in a horizontal, vertical or diagonal row.");
    System.out.println("- Choose a column on the board to drop your chip.");
    System.out.println("- Each player takes turns placing their chips on the board.\n");
  }
  
  // Return method for the users input
  public static int userInput (int player) { 
    int userIn = 0; // Int for the user input (preset to 0 to be able to compile)
    boolean validInput = true; // Boolean for wether or not it's a valid input, boolean for whether or not a column is full
        
    // Prompt for user input
    do {
      try {
        System.out.print("Player " + player + " turn : ");
        userIn = In.getInt();
        if (!(userIn >= 1 && userIn <=7)) { // If the user input is not between 1 and 7, sets validInput to false
          validInput = false;
          System.out.println("Not a valid input.");
        }
        // If the column that the user's trying to place their chip is full (Looks at the top position to check if the column's full]), asks them to re-enter
        else if (board[0][userIn-1] != 32) {
          validInput = false;
          System.out.println("Selected column is full.");
        }
        else {
          validInput = true;
        }
      }
      catch (Exception e) { // catches any exception
        System.out.println("Not a valid input.");
        validInput = false;
      }
    } while (validInput == false); // Loop exits when the user input is a valid one
    return userIn -=1; // Takes their value and substracts 1 (to avoid array out of bounds error), returns it
  }
  
  // Void method to set the player's pieces on the game board
  public static void boardInteraction (char playerChip, int player) {
    boolean chipPlaced; // Boolean variable for wether or not a chip has already placed
    int userIn = userInput(player); // Getting the users input
    for (int i=0; i<7; i++) { // Looping through the columns
      chipPlaced = false; // Sets chipPlaced to false meaning that a chip must be placed
      if (userIn == i) { // When it reaches the column that the player desires
        for (int x=5; x>=0; x--) { // Loops through the rows, (From bottom of the board to the top)
          if (board[x][i] == 32 && chipPlaced == false) {
            board[x][i] = playerChip; // Changes the value of the element at index x, i to the char 'R'
            chipPlaced = true; // Sets chipPlaced to true, meaning a chip was placed and a second chip should not be plavced this turn
          }
        }
      }
    }
  }
  
  // Return method to return whether or not someone has one the game
  public static boolean winChecker (char playerChip) {
    boolean winner = false; // Boolean var for if there's a winner
    // Series of for loops and selection statements to determine if someone has won in the horizontal direction.
    for (int i=0; i<7; i++) { // Cycling through the columns
      for (int x=5; x>=0; x--) { // Cycling through the rows
        if (board[x][i] == playerChip && winner == false) { // If that certain position on the board is equal to the playerChip char
          
          // Try and catch statments around each directional checker to avoid array out of bounds errors
          
          //Horizontal direction
          try {
            if (board[x][i+1] == playerChip && winner == false) {
              if (board[x][i+1] == playerChip && board[x][i+2] == playerChip && board[x][i+3] == playerChip) { // If the 3 proceeding chars in the horizontal direction are the same value, sets winner to true
                winner = true;
              }
              else {
                winner = false;
              }
            }
          }
          catch (Exception e) {
          }
          
          // Vertical direction
          try {
            if (board[x-1][i] == playerChip && winner == false) {
              if (board[x-1][i] == playerChip && board[x-2][i] == playerChip && board[x-3][i] == playerChip){ // If the 3 proceeding chars in the vertical direction are the same value, sets winner to true
                winner = true;
              }
              else {
                winner = false;
              }
            }
          }
          catch (Exception e) {
          }
          
          // Diagonal directions (From lower left to upper right direction)
          try {
            if (board[x-1][i+1] == playerChip && winner == false) {
              if (board[x-1][i+1] == playerChip && board[x-2][i+2] == playerChip && board[x-3][i+3] == playerChip) { // If the 3 proceeding chars in the diagonal direction are the same value, sets winner to true
                winner = true;
              }
              else {
                winner = false;
              }
            }
          }
          catch (Exception e) {
          }
          
          // Diagonal directions (From lower right to upper left direction)
          try {
            if (board[x-1][i-1] == playerChip && winner == false) {
              if (board[x-1][i-1] == playerChip && board[x-2][i-2] == playerChip && board[x-3][i-3] == playerChip) { // If the 3 proceeding chars in the vertical direction are the same value, sets winner to true
                winner = true;
              }
              else {
                winner = false;
              }
            }
          }
          catch (Exception e) {
          }
          
        }
      }
    }
    return winner;
    
    
  }
  
  // Void method to set the board up with empty spaces (used at the beginning of each match)
  public static void setupBoard () {
    // Setting all values of the board array to space char
    for (int y=0; y<6; y++) {
      for (int x=0; x<7; x++) {
        board[y][x] = 32;
      }
    }
  }
  
  // Return method to return whether or not the user wants to replay the game 
  public static boolean replayGame () {
    String userIn;
    boolean validInput, replayGame = true;
    
    System.out.println("\nDo you want to play again?\n(Type 'yes' to coninue, 'no' to exit)");
    do {
      userIn = In.getString();
      if (userIn.trim().toUpperCase().equals("YES")) { // If user types yes, sets replayGame to true, and validInput to true to exit loop
        replayGame = true;
        validInput = true;
      }
      else if (userIn.trim().toUpperCase().equals("NO")) { // If user types no, sets replayGame to false, and validInput to true to exit loop
        replayGame = false;
        validInput = true;
      }
      else { // If the input is anything else, sets validInput to false to loop again
        validInput = false;
        System.out.println("Invalid input.");
      }
    } while (validInput == false); // Continues loop while the input isn't valid
    
    return replayGame;
  }
  
}
